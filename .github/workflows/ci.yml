name: 🧪 Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

# Ensure tests must pass before merging
permissions:
  contents: read
  pull-requests: read
  checks: write

jobs:
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 TypeScript type check
      run: npm run type-check

    - name: 🧪 Run unit tests
      run: npm run test:run

    - name: 📊 Generate coverage report
      run: npm run test:coverage

    - name: 📈 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🎭 Install Playwright browsers
      run: npx playwright install --with-deps

    - name: 🧪 Run E2E tests
      run: npm run test:e2e

    - name: 📁 Upload Playwright report
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  build:
    name: 🏗️ Build Test
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🏗️ Build project
      run: npm run build

    - name: ✅ Verify build output
      run: |
        if [ ! -d "dist" ]; then
          echo "❌ Build failed - dist directory not found"
          exit 1
        fi
        if [ ! -f "dist/index.html" ]; then
          echo "❌ Build failed - index.html not found"
          exit 1
        fi
        echo "✅ Build successful"

  lint-commit:
    name: 📝 Lint Commit Messages
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 📝 Lint commit messages
      run: |
        # Check if commits follow conventional commit format
        git log --oneline ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | while read line; do
          commit_msg=$(echo "$line" | cut -d' ' -f2-)
          if [[ ! $commit_msg =~ ^(feat|fix|docs|style|refactor|test|chore|release)(\(.+\))?: ]]; then
            echo "❌ Invalid commit message format: $commit_msg"
            echo "💡 Expected format: type(scope): description"
            echo "💡 Examples: feat(tools): add new feature, fix(ui): resolve button issue"
            exit 1
          fi
        done
        echo "✅ All commit messages follow conventional format"